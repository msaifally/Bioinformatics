install.packages("plotrix")
install.packages("plotrix")
$R
$ R
R
mystring <-("Hello World!")
print (mystring)
q()
source("http://bioconductor.org/biocLite.R")
getwd()
# The plotrix demo in roughly alphabetical order
biocLite()
library("BiocInstaller", lib.loc="~/R/win-library/3.3")
detach("package:BiocInstaller", unload=TRUE)
biocLite("GEOquery")
biocLite("GEOquery")
biocLite("GEOquery")
source("https://bioconductor.org/biocLite.R")
biocLite()
detach("package:BiocInstaller", unload=TRUE)
biocLite("GEOquery")
cels
library(simpleaffy)
celfiles <- read.affy(covdesc="phenodata.txt", path="data")
celfiles
celfiles.gcrma <- gcrma(celfiles)
celfiles.gcrma
celfiles.filtered <- nsFilter(celfiles.gcrma, require.entrez=FALSE, remove.dupEntrez=FALSE)
celfiles.filtered
samples <- celfiles.gcrma$Target
samples
samples <- as.factor(samples)
samples
design <- model.matrix(~0 + samples)
colnames(design) <- c("choroid", "huvec", "iris", "retina")
design
library(limma)
biocLite("limma")
source("https://bioconductor.org/biocLite.R")
biocLite("limma")
library(limma)
fit <- lmFit(exprs(celfiles.filtered$eset), design)
contrast.matrix <- makeContrasts(huvec_choroid = huvec - choroid, huvec_retina = huvec - retina, huvec_iris <- huvec - iris, levels=design)
contrast.matrix
huvec_fits <- contrasts.fit(fit, contrast.matrix)
huvec_ebFit <- eBayes(huvec_fits)
topTable(huvec_ebFit, number=10, coef=1)
nrow(topTable(huvec_ebFit, coef=1, number=10000, lfc=5))
nrow(topTable(huvec_ebFit, coef=1, number=10000, lfc=4))
probeset.list <- topTable(huvec_ebFit, coef=1, number=10000, lfc=4)
library(hgu133plus2.db
library(hgu133plus2.db)
library(annotate)
gene.symbols <- getSYMBOL(probeset.list$ID, "hgu133plus2")
head(probeset.list)
gene.symbols <- getSYMBOL(rownames(probeset.list), "hgu133plus2")
> results <- cbind(probeset.list, gene.symbols)
> results <- cbind(probeset.list, gene.symbols)
results <- cbind(probeset.list, gene.symbols)
head(results)
write.table(data, "results2.txt", sep="\t", quote=FALSE)
write.table(data, "results2.txt", sep="\t", quote=FALSE)
write.table(]', "results2.txt", sep="\t", quote=FALSE)
write.table(results, "results.txt", sep="\t", quote=FALSE)
cellfiles
celfiles
gene.symbols <- getSYMBOL(rownames(probeset.list), "hgu133plus2")
write.table(results, "results3.txt", sep="\t", quote=FALSE)
biocLite("GEOquery")
biocLite("affy")
biocLite("gcrma")
biocLite("hugene10stv1cdf")
biocLite("hugene10stv1probe")
biocLite("hugene10stprobeset.db")
celfiles
q()
source("http://www.bioconductor.org/biocLite.R")
biocLite("siggenes")
source("http://www.bioconductor.org/biocLite.R")
biocLite("siggenes")
biocLite("RankProd")
biocLite("limma")
biocLite("fibroEset")
require(affy)
require(annaffy)
require(hgu95av2.db)
require(made4)
biocLite("annaffy")
require("hgu95av2.db")
biocLite("hgu95av2.db")
biocLite("limma")
biocLite("made4")
require(affy)
require(annaffy)
require(hgu95av2.db)
require(made4)
data.vsn<- read.csv("data.vsn.csv", as.is=TRUE, row.names=1)
data.vsn<- read.csv("data.vsn.csv", as.is=TRUE, row.names=1)
dim(data.vsn)
biocLite("siggenes")
biocLite("RankProd")
biocLite("limma")
biocLite("fibroEset")
source("http://www.bioconductor.org/biocLite.R")
biocLite("siggenes")
require(affy)
require(annaffy)
require(hgu95av2.db)
require(affy)
require(annaffy)
require(hgu95av2.db)
data.vsn<- read.csv("data.vsn.csv", as.is=TRUE, row.names=1)
annt<-read.table("annt.txt", header=TRUE)
data.vsn <- read.csv("data.vsn.csv", as.is = TRUE,
+ row.names = 1)
shiny::runApp('C:/Users/user/Desktop/R-github/Bioinformatics/Project')
runApp('C:/Users/user/Desktop/R-github/Bioinformatics/Project')
runApp('C:/Users/user/Desktop/R-github/Bioinformatics/Project')
getwd()
runApp('C:/Users/user/Desktop/R-github/Bioinformatics/Project')
setwd("C:\Users\user\Desktop\R-github\Bioinformatics\Project")
setwd("C:/Users/user/Desktop/R-github/Bioinformatics/Project")
runApp()
